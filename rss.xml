<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0">
  <channel>
    <title>Meh....</title>
    <link>http://goldbar80.github.io</link>
    <description>Emacs, Programming, and ....</description>
    <pubDate>Wed, 09 Nov 2016 13:09:52 PST</pubDate>
    <lastBuildDate>Wed, 09 Nov 2016 13:09:52 PST</lastBuildDate>
    <docs>http://www.rssboard.org/rss-specification</docs>
    <generator>Org-page static site generator (https://github.com/kelvinh/org-page)</generator>
    <item>
      <title>Take a Screenshot and Add a link to it in Org</title>
      <link>http://goldbar80.github.io/blog/2016/11/09/get-screenshot-and-store-it-in-org</link>
      <description><![CDATA[<div>
    <section id="wrapper">
        <article class="post">
            <header>
                    <h1>Take a Screenshot and Add a link to it in Org</h1>
            </header>
            <br />
            <section id="post-body">
                <p>
Sometimes I want to take and store a screenshot, then add link to the screenshot in org buffer. I found a awesome solution from <a href="http://stackoverflow.com/questions/17435995/paste-an-image-on-clipboard-to-emacs-org-mode-file-without-saving-it">stackoverflow</a> that works under macOS and Linux (X11). I've slightly changed the code to let it accept a <code>&lt;basename&gt;</code> from the mini-buffer prompt. Paste the following code in a file of your <code>load-path</code> and load it.
</p>

<div class="org-src-container">
<pre class="src src-emacs-lisp"><span style="color: #4f97d7;">(</span><span style="color: #4f97d7; font-weight: bold;">if</span> <span style="color: #bc6ec5;">(</span>window-system<span style="color: #bc6ec5;">)</span>
    <span style="color: #bc6ec5;">(</span><span style="color: #4f97d7; font-weight: bold;">progn</span>
      <span style="color: #2d9574;">(</span><span style="color: #4f97d7; font-weight: bold;">defun</span> <span style="color: #bc6ec5; font-weight: bold;">goldbar80/org-screenshot</span> <span style="color: #67b11d;">(</span>basename<span style="color: #67b11d;">)</span>
        <span style="color: #2aa1ae;">"Take a screenshot into a time stamped unique-named file in the</span>
<span style="color: #2aa1ae;">same directory as the org-buffer and insert a link to this file."</span>
        <span style="color: #67b11d;">(</span><span style="color: #4f97d7; font-weight: bold;">interactive</span>
         <span style="color: #b1951d;">(</span><span style="color: #4f97d7; font-weight: bold;">let</span> <span style="color: #4f97d7;">(</span><span style="color: #bc6ec5;">(</span>default_name <span style="color: #2d9574;">(</span>format-time-string <span style="color: #2d9574;">"%Y%m%d_%H%M%S"</span><span style="color: #2d9574;">)</span><span style="color: #bc6ec5;">)</span><span style="color: #4f97d7;">)</span>
           <span style="color: #4f97d7;">(</span>list
            <span style="color: #bc6ec5;">(</span>read-string <span style="color: #2d9574;">(</span>format <span style="color: #2d9574;">"file name prefix (%s)): "</span> default_name<span style="color: #2d9574;">)</span> nil nil default_name<span style="color: #bc6ec5;">)</span><span style="color: #4f97d7;">)</span><span style="color: #b1951d;">)</span><span style="color: #67b11d;">)</span>
        <span style="color: #67b11d;">(</span>message basename<span style="color: #67b11d;">)</span>
        <span style="color: #67b11d;">(</span>org-display-inline-images<span style="color: #67b11d;">)</span>
        <span style="color: #67b11d;">(</span><span style="color: #4f97d7; font-weight: bold;">setq</span> filename
              <span style="color: #b1951d;">(</span>concat
               <span style="color: #4f97d7;">(</span>file-name-base <span style="color: #bc6ec5;">(</span>buffer-file-name<span style="color: #bc6ec5;">)</span><span style="color: #4f97d7;">)</span>
               <span style="color: #2d9574;">"/"</span>
               basename
               <span style="color: #2d9574;">".png"</span><span style="color: #b1951d;">)</span><span style="color: #67b11d;">)</span>
        <span style="color: #67b11d;">(</span><span style="color: #4f97d7; font-weight: bold;">unless</span> <span style="color: #b1951d;">(</span>file-exists-p <span style="color: #4f97d7;">(</span>file-name-directory filename<span style="color: #4f97d7;">)</span><span style="color: #b1951d;">)</span>
          <span style="color: #b1951d;">(</span>make-directory <span style="color: #4f97d7;">(</span>file-name-directory filename<span style="color: #4f97d7;">)</span><span style="color: #b1951d;">)</span><span style="color: #67b11d;">)</span>
                                        <span style="color: #2aa1ae; background-color: #292e34;">; </span><span style="color: #2aa1ae; background-color: #292e34;">take screenshot</span>
        <span style="color: #67b11d;">(</span><span style="color: #4f97d7; font-weight: bold;">if</span> <span style="color: #b1951d;">(</span>eq system-type 'darwin<span style="color: #b1951d;">)</span>
            <span style="color: #b1951d;">(</span>call-process <span style="color: #2d9574;">"screencapture"</span> nil nil nil <span style="color: #2d9574;">"-i"</span> filename<span style="color: #b1951d;">)</span><span style="color: #67b11d;">)</span>
        <span style="color: #67b11d;">(</span><span style="color: #4f97d7; font-weight: bold;">if</span> <span style="color: #b1951d;">(</span>eq system-type 'gnu/linux<span style="color: #b1951d;">)</span>
            <span style="color: #b1951d;">(</span>call-process <span style="color: #2d9574;">"import"</span> nil nil nil filename<span style="color: #b1951d;">)</span><span style="color: #67b11d;">)</span>
                                        <span style="color: #2aa1ae; background-color: #292e34;">; </span><span style="color: #2aa1ae; background-color: #292e34;">insert into file if correctly taken</span>
        <span style="color: #67b11d;">(</span><span style="color: #4f97d7; font-weight: bold;">if</span> <span style="color: #b1951d;">(</span>file-exists-p filename<span style="color: #b1951d;">)</span>
            <span style="color: #b1951d;">(</span>insert <span style="color: #4f97d7;">(</span>concat <span style="color: #2d9574;">"[[file:"</span> filename <span style="color: #2d9574;">"]]"</span><span style="color: #4f97d7;">)</span><span style="color: #b1951d;">)</span><span style="color: #67b11d;">)</span><span style="color: #2d9574;">)</span>
      <span style="color: #bc6ec5;">)</span><span style="color: #4f97d7;">)</span>
</pre>
</div>

<p>
Once you invoke  <code>M-x goldbar80/org-screenshot</code>, you are prompted to enter a <code>&lt;basename&gt;</code>. The default value is the timestamp when the function is called. The original code adds a random string after the timestamp, but I dropped it as I assume I wouldn't call the function multiple times in one second :) Then, capture your designated area using your pointing device. Finally, the screenshot will be stored in <code>&lt;org buffer file basename&gt;/&lt;basename&gt;.png</code> and a link to it will be inserted to your org buffer.
</p>

            </section>
        </article>
    </section>
</div>
]]></description>
      <pubDate>2016-11-09</pubDate>
      <guid>http://goldbar80.github.io/blog/2016/11/09/get-screenshot-and-store-it-in-org</guid>
    </item>
    <item>
      <title>Install and Configure sqlplus on macOS</title>
      <link>http://goldbar80.github.io/blog/2016/11/07/install-and-configure-sqlplus-on-os-x</link>
      <description><![CDATA[]]></description>
      <pubDate>2016-11-08</pubDate>
      <guid>http://goldbar80.github.io/blog/2016/11/07/install-and-configure-sqlplus-on-os-x</guid>
    </item>
    <item>
      <title>Running SQL Statments against Oracle database in Org-mode</title>
      <link>http://goldbar80.github.io/blog/2016/11/08/running-sql-statments-against-oracle-database-in-org-mode</link>
      <description><![CDATA[<div>
    <section id="wrapper">
        <article class="post">
            <header>
                    <h1>Running SQL Statments against Oracle database in Org-mode</h1>
            </header>
            <br />
            <section id="post-body">
                
<div id="outline-container-org3763681" class="outline-2">
<h2 id="org3763681">tl;dr</h2>
<div class="outline-text-2" id="text-org3763681">
<p>
As a practice of <a href="https://en.wikipedia.org/wiki/literate_programming">literate programming[wikipedia]</a>, I would try org-mode for running SQL statement against Oracle Database. With the power of org-babel, you can run SQL queries and write the results back to the org-mode buffers.
</p>
</div>
</div>

<div id="outline-container-org58062ef" class="outline-2">
<h2 id="org58062ef">Walkthrough</h2>
<div class="outline-text-2" id="text-org58062ef">
<ol class="org-ol">
<li>Install Oracle <code>instant client</code> in your machine. For macOS, you may follow the instruction in <a href="https://goldbar80.github.io/blog/2016/11/07/install-and-configure-sqlplus-on-os-x/">here</a>.</li>

<li><p>
Add <code>sql</code> as a org-babel backend.
</p>

<div class="org-src-container">
<pre class="src src-emacs-lisp"><span style="color: #4f97d7;">(</span>org-babel-do-load-languages
 'org-babel-load-languages
 '<span style="color: #bc6ec5;">(</span>
   <span style="color: #2aa1ae; background-color: #292e34;">;; </span><span style="color: #2aa1ae; background-color: #292e34;">...</span>
   <span style="color: #2d9574;">(</span>sql . t<span style="color: #2d9574;">)</span>
   <span style="color: #2aa1ae; background-color: #292e34;">;; </span><span style="color: #2aa1ae; background-color: #292e34;">...</span>
   <span style="color: #bc6ec5;">)</span>
 <span style="color: #4f97d7;">)</span>
</pre>
</div></li>

<li><p>
Write a source block like below. Note that all arguments are mandatory. The oracle database support seems to be added in the late 2015 <sup><a id="fnr.1" class="footref" href="#fn.1">1</a></sup>, which tells you need to use the recent version of org (I use the latest (9.0) from the org repository).
</p>

<div class="org-src-container">
<pre class="src src-org"><span style="color: #827591; background-color: #373040;">#+BEGIN_SRC sql :engine oracle :dbhost "&lt;hostname&gt;" :dbport "&lt;port&gt;" :dbuser "&lt;user&gt;" :dbpassword "&lt;password&gt;" :database</span><span style="color: #c56ec3; background-color: #373040;"> "&lt;sid&gt;"</span>
<span style="color: #4f97d7; background-color: #2f2b33; font-weight: bold;">select</span><span style="color: #cbc1d5; background-color: #2f2b33;"> </span><span style="color: #4f97d7; background-color: #2f2b33;">count</span><span style="color: #cbc1d5; background-color: #2f2b33;">(*) </span><span style="color: #4f97d7; background-color: #2f2b33; font-weight: bold;">from</span><span style="color: #cbc1d5; background-color: #2f2b33;"> user_tables;</span>
<span style="color: #827591; background-color: #373040;">#+END_SRC</span>
</pre>
</div>

<ol class="org-ol">
<li><p>
If you use the same configuration in a buffer, it's better to set connection information in the beginning of the file
</p>

<div class="org-src-container">
<pre class="src src-org"><span style="color: #9f8766;">#+PROPERTY: header-args:sql :engine oracle :dbhost "&lt;hostname&gt;" :dbport "&lt;port&gt;" :dbuser "&lt;user&gt;" :dbpassword "&lt;password</span><span style="color: #c56ec3;">&gt;" :database "&lt;sid&gt;"</span>
</pre>
</div></li>
</ol></li>

<li><p>
Then press <code>C-c C-c</code> on the source block. Then you will get the result in the org buffer.
</p>

<div class="org-src-container">
<pre class="src src-org"><span style="color: #9f8766;">#+RESULTS:</span>
<span style="color: #b2b2b2; background-color: #293239;">| COUNT(*) |</span>
<span style="color: #b2b2b2; background-color: #293239;">|----------|</span>
<span style="color: #b2b2b2; background-color: #293239;">|       68 |</span>
</pre>
</div></li>

<li><p>
Here's the source block and the result of the html export.
</p>

<div class="org-src-container">
<pre class="src src-sql"><span style="color: #4f97d7; font-weight: bold;">select</span> <span style="color: #4f97d7;">count</span>(*) <span style="color: #4f97d7; font-weight: bold;">from</span> user_tables;
</pre>
</div>

<table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides">


<colgroup>
<col  class="org-right" />
</colgroup>
<thead>
<tr>
<th scope="col" class="org-right">COUNT(*)</th>
</tr>
</thead>
<tbody>
<tr>
<td class="org-right">68</td>
</tr>
</tbody>
</table></li>
</ol>
</div>
</div>
<div id="footnotes">
<h2 class="footnotes">Footnotes: </h2>
<div id="text-footnotes">

<div class="footdef"><sup><a id="fn.1" class="footnum" href="#fnr.1">1</a></sup> <div class="footpara"><p class="footpara">
<a href="https://lists.gnu.org/archive/html/emacs-orgmode/2015-12/msg00485.html">https://lists.gnu.org/archive/html/emacs-orgmode/2015-12/msg00485.html</a>
</p></div></div>


</div>
</div>
            </section>
        </article>
    </section>
</div>
]]></description>
      <pubDate>2016-11-08</pubDate>
      <guid>http://goldbar80.github.io/blog/2016/11/08/running-sql-statments-against-oracle-database-in-org-mode</guid>
    </item>
  </channel>
</rss>